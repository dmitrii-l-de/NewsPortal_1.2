"""
Django settings for news project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

from dotenv import load_dotenv
load_dotenv()

import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJ_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


def log_filter_debug_info(rec: logging.LogRecord):
    return (rec.levelname == 'DEBUG') or (rec.levelname == 'INFO')


def log_filter_warning(rec: logging.LogRecord):
    return rec.levelname == 'WARNING'


def log_filter_error_critical(rec: logging.LogRecord):
    return (rec.levelname == 'ERROR') or (rec.levelname == 'CRITICAL')

# ниже реализовано логирование
LOGGING = {
    # version всегда определяется как 1, на текущий момент это единственно допустимое значение
    'version': 1,
    # disable_existing_loggers контролирует работу существующей (стандартной) схемы
    # логирования Django
    'disable_existing_loggers': False,
    # В ключе formatters определен достаточно простой формат записи сообщений.
    'formatters': {
        'debug': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        'warning': {
            'format': '{asctime} {levelname} {pathname} {message}',
            'style': '{',
        },
        'critical': {
            'format': '{asctime} {levelname} {pathname} {message} {exc_info}',
            'style': '{',
        },
        'to_file_general': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
    },
    'filters': {
        # определен фильтр, который пропускает записи только в случае, когда DEBUG = True
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        # определен фильтр, который пропускает записи только в случае, когда DEBUG = False
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'debug_info': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': log_filter_debug_info,
        },
        'warning': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': log_filter_warning,
        },
        'error_critical': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': log_filter_error_critical,
        },
    },
    'handlers': {
        # В ключе handlers можно обнаружить обработчики.
        # Первый обработчик передает сообщения уровня DEBUG в консоль. Кроме того,
        # накладывается фильтр, определенный выше require_debug_true
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', 'debug_info'],
            'class': 'logging.StreamHandler',
            'formatter': 'debug',
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true', 'warning'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning',
        },
        'console_critical': {
            'level': 'ERROR',
            'filters': ['require_debug_true', 'error_critical'],
            'class': 'logging.StreamHandler',
            'formatter': 'critical',
        },
        'file_general': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'formatter': 'to_file_general',
            'filename': 'general.log'
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'critical',
            'filename': 'errors.log'
        },
        'file_security': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'to_file_general',
            'filename': 'security.log'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'warning',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console_debug', 'console_warning',
                         'console_critical', 'file_general'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.template': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db_backends': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['file_security'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.sites',
    'modeltranslation', # обязательно впишите его перед админом
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # подключение созданного приложения project
    'project',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'news.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'news.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский')
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news/'
LOGOUT_REDIRECT_URL = '/news/'

ACCOUNT_EMAIL_REQUIRED = True # указывают на то, что поле email является обязательным и уникальным
ACCOUNT_UNIQUE_EMAIL = True # указывают на то, что поле email является обязательным и уникальным
ACCOUNT_USERNAME_REQUIRED = False # говорит, что username теперь необязательный
ACCOUNT_AUTHENTICATION_METHOD = 'email' # указывает, что аутентификация будет происходить посредством электронной почты
ACCOUNT_EMAIL_VERIFICATION = 'none' # указываем, что верификация почты отсутствует
# если поставить 'mandatory', то регистрацию будет необходимо подтверждать с залогиненой почты

#Чтобы allauth распознал нашу форму как ту, что должна выполняться вместо формы
# по умолчанию, необходимо добавить строчку
ACCOUNT_FORMS = {'signup': 'project.forms.CommonSignupForm'}

# Реализация отправки писем через яндекс smtp
# EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один                             # и тот же
# EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
# EMAIL_HOST_USER = 'gbicfo'  # ваше имя пользователя, например, если ваша почта
# # user@yandex.ru, то сюда надо писать user, иными словами, это всё то
# # что идёт до собаки
# EMAIL_HOST_PASSWORD = MY_EMAIL_HOST_PASSWORD  # пароль от почты
# EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это,
# # почитайте в дополнительных источниках, но включать его здесь обязательно
# Реализация отправки писем. То же самое что и smtp только здесь на дебаг платформе
EMAIL_HOST = "app.debugmail.io"
EMAIL_HOST_USER = "ed143811-3a8e-47db-bb51-2fd9eabd1a34"
EMAIL_HOST_PASSWORD = "3ca9d4d0-c913-425a-bb4f-dab693596a12"
EMAIL_PORT = "25"
DEFAULT_MAIL_SENDER = EMAIL_HOST_USER + 'gbicfo@yandex.ru'

# Format string for displaying run time timestamps in the Django admin site. The default
# just adds seconds to the standard Django format, which is useful for displaying the timestamps
# for jobs that are scheduled to run on intervals of less than one minute.
#
# See https://docs.djangoproject.com/en/dev/ref/settings/#datetime-format for format string
# syntax details.
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# Maximum run time allowed for jobs that are triggered manually via the Django admin site, which
# prevents admin site HTTP requests from timing out.
#
# Longer running jobs should probably be handed over to a background task processing library
# that supports multiple background worker processes instead (e.g. Dramatiq, Celery, Django-RQ,
# etc. See: https://djangopackages.org/grids/g/workers-queues-tasks/ for popular options).
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds


# CELERY_IMPORTS = ("tasks")
CELERY_BROKER_URL = 'redis://localhost:6379'
# указывает на URL брокера сообщений (Redis). По умолчанию он находится на порту 6379.
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
# указывает на хранилище результатов выполнения задач
CELERY_ACCEPT_CONTENT = ['application/json']
# допустимый формат данных
CELERY_TASK_SERIALIZER = 'json'
# метод сериализации задач
CELERY_RESULT_SERIALIZER = 'json'
# метод сериализации результатов


CACHES = {
    'default': {
        'TIMEOUT': 60, # добавляем стандартное время ожидания в минуту (по умолчанию это 5 минут — 300 секунд)
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}


LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]
